*ku.txt*	Support to do something

Version 0.0.0
Copyright (C) 2008 kana <http://nicht.s8.xrea.com/>
License: MIT license (see <http://www.opensource.org/licenses/mit-license>)
$Id: ku.txt 6579 2008-02-11 16:44:48Z kana $


Introduction			|ku-introduction|
Commands			|ku-commands|
Functions			|ku-functions|
Customizing			|ku-customizing|
Bugs				|ku-bugs|
Changelog			|ku-changelog|




==============================================================================
INTRODUCTION						*ku-introduction*

Ku is a Vim plugin to support to do something on buffer, files, directories or
other kind of items with automatic completion and fuzzy pattern.  You can also
define your own kind of items.

To start selection, use |ku-commands|.  The commands will open a new window
(|ku-window|) to take user input.  As user inputs some characters, pop-up menu
(|ins-completion-menu|) will be automatically appeared and updated to show the
proper candidates for the input pattern.

						 *ku-auto-directory-insertion*
Whenever "/" is typed, the name of an appropriate directory will be
automatically inserted.  This feature is derived from bluewind
<http://cspace.s2.xrea.com/software/bluewind/>.

							*ku-window* *ku-buffer*
ku window		The window which is opened by |ku-commands|.
			This window will be automatically closed when:
			- An action is taken for an item.
			- Selecting is canceled.
			- Another window or another tab page is acticated.




==============================================================================
COMMANDS						*ku-commands*

:Ku[!] [{preferred-type}]				*:Ku*
			Start selecting by ku.
			[bang] modifier will be used by an action.
			{preferred-type} specifies what type of items to be
			appeared in the completion list.  If it is omitted,
			all type of items will be appeared.




==============================================================================
FUNCTIONS						*ku-functions*

ku#start({bang}, [{preferred-type}])			*ku#start()*
			Function version of |:Ku|.

ku#default_key_mappings()			   *ku#default_key_mappings()*
			Define the following key mappings which are local to
			the current buffer.  If one of the following {lhs}s is
			already mapped to something, it will be overridden.
			Be careful about when to call this function.

			Modes	{lhs}		{rhs} ~
			ni	<C-c>		<Plug>(ku-cancel)
			ni	<Return>	<Plug>(ku-do-default)
			ni	<Tab>		<Plug>(ku-choose-action)
			ni	<C-j>		<Plug>(ku-next-type)
			ni	<C-k>		<Plug>(ku-previous-type)

ku#bang()						*ku#bang()*
			Return whether [bang] modifier is given for the last
			executed |:Ku| or |ku#start()|.  String "!" will be
			returned if [bang] modifier is given, otherwise an
			empty string will be returned.

ku#register_type({typedef})				*ku#register_type()*
			Register new type which is defined by {typedef}.
			{typedef} is a dictionary.  See |ku-write-new-type|
			for the detail of {typedef}.

			Note that any built-in type can be overridden.

ku#unregister_type({name})				*ku#unregister_type()*
			Unregister the type {name}.

			Note that any built-in type can be unregistered.

ku#custom_action({type-name}, {action-name}, {funcref})	*ku#custom_action()*
			Define {funref} as a new action named {action-name}
			for items of the type {type-name}.

			{type-name} may be '*fallback*', if so, the given
			action is defined as a fallback action for all types.
			This means that the fallback action {action-name} will
			be used if the action {action-name} is not defined for
			a type,

ku#custom_key({type-name}, {key}, {new-action-name})	*ku#custom_key()*
			Define {key} to do the action {new-action-name} for
			items of the type {type-name} in
			|<Plug>(ku-choose-action)|.




==============================================================================
KEY MAPPINGS						*ku-key-mappings*

In the ku window, the following key mappings are defined:

<Plug>(ku-cancel)					*<Plug>(ku-cancel)*
			Cancel selecting (and close the ku window).

<Plug>(ku-do-default)				       *<Plug>(ku-do-default)*
			Do the default action for the current item.

<Plug>(ku-choose-action)			    *<Plug>(ku-choose-action)*
			Show the mesasge on available actions, take a single
			key input, then do the appropriate action.

<Plug>(ku-next-type)					*<Plug>(ku-next-type)*
<Plug>(ku-previous-type)			    *<Plug>(ku-previous-type)*
			Change the preferred type (ascending / descending).

The default key mappings are defined by |ku#default_key_mappings()|.




==============================================================================
TYPES							*ku-types*

Types are kinds of items.  The following types are built-in.

Type Name	Remarks ~
buffer		Only 'buflisted' buffers can be selected.
file		Directories are also included.


Action Name	Remarks ~

cd		Change the current working directory as same as the given
		item.  If the item is a directory, set to the directory.  If
		the item is a file, set to the directory which contains the
		item.  Otherwise, nothing happens.

cd-local	Same as "cd", but use |:lcd|.

ex		Enter to Command-line mode.  The item is automatically
		inserted and the cursor is placed at the beginning of the
		command-line.

other actions	...




==============================================================================
CUSTOMIZING						*ku-customizing*

Initialization						*ku-initialization*
							*KuLoaded*
	Most part of Ku isn't loaded until one of its functions or commands is
	actually used.  After all part of Ku is loaded, "User KuLoaded" event
	will be published.  Use this event to delay applying user's settings
	until all part of Ku is loaded.
							*KuBufferInitialize*
	Ku has its own buffer to do its work.  Whenever the buffer is created,
	"User KuBufferInitialize" event will be published.  Use this event to
	do user's initialization for the buffer, for example: >

		autocmd User KuBufferInitialize  call MyOwnInitialization()
<
	If there is no autocommand for |KuBufferInitialize|, Ku will call
	|ku#default_key_mappings()| to define some useful key mappings.
	Otherwise, no key mapping will be defined.  So you have to call it
	explicitly if you use |KuBufferInitialize|.

Write New Type						*ku-write-new-type*
	To use new type, call |ku#register_type()| with its {typedef}.
	{typedef} is a dictionary and it contains the following entries:

	'name'		string
		The name of this type.  It consits of only lowercase
		alphabets.

	'gather'	funcref
		The function to gather items matching to the given pattern.
		It is called with one parameter, the user input pattern.
		It must return the list of |complete-items|.

	'initialize'	funcref		(optional)
		The function which will be called whenever the ku window is
		opened.  It's called with 1 argument which indicates the
		timing of calling.  The possible values are:

		'before-open'	before opening the |ku-buffer|
		'after-open'	after opening the |ku-buffer|

		The main purpose of this function is to do some initialization
		for 'gather'.

	'keys'		dictionary
		The table which contains what action is associated with a key.
		This information is used by |<Plug>(ku-choose-action)|.

		Each key of an entry is a string representation of a key to
		press.  The string "*default*" is used by
		|<Plug>(ku-do-default)|.

		Each value of an entry is a string of the name of an action.

	'actions'	dictionary
		The table which contains the available actions for items of
		this type and their names.

		Each key is a string of the name of an action.

		Each value is a funcref to the function which is called with
		one parameter, the selected item (as described in
		|complete-items|).




==============================================================================
BUGS							*ku-bugs*

- Many bugs must be around the world.




==============================================================================
CHANGELOG						*ku-changelog*

0.0.0	2008-01-25T19:34:13+09:00
	- Derived from buffuzzy and zapit.
	- Still under development.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:
