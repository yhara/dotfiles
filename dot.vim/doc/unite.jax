*unite.txt*	すべての情報源を統合する

Version: 1.0
Author : Shougo <Shougo.Matsu@gmail.com>
Japanese Documentation Author : naoina
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

目次						*unite-contents*

概要			|unite-introduction|
使い方			|unite-usage|
インストール		|unite-install|
インターフェース	|unite-interface|
  コマンド		  |unite-commands|
  変数			  |unite-variables|
    情報源の変数	    |unite-sources-variables|
  キーマッピング	  |unite-key-mappings|
  関数			  |unite-functions|
  情報源		  |unite-source|
  種類			  |unite-kind|
  アクション		  |unite-action|
設定例			|unite-examples|
情報源の作成		|unite-create-source|
ToDo			|unite-todo|
既知のバグ			|unite-bugs|
更新履歴		|unite-changelog|

==============================================================================
概要						*unite-introduction*

*unite* はファイル、バッファ、最近使用したファイル、レジスタといった、任意の情
報源からの検索、表示を行う。表示された候補に対して、候補の種類ごとに定義された
アクションを実行することができる。
似たプラグインとして、|fuzzyfinder|や|ku|があるが、*unite* はVimの補完インタフ
ェースを使用しないということ、情報源の統合を行うことが違いとして挙げられる。

==============================================================================
使い方						*unite-usage*

	情報源としてファイル及び、バッファを指定して起動する場合
>
	:Unite file buffer
<

	絞込みテキストとしてhogeを入力した状態で起動する場合
>
	:Unite -input=hoge file
<

uniteを起動すると、デフォルトの状態ではウィンドウが水平に分割され、デフォルトで
は上側にuniteのバッファが開かれる。例えば
>
	:Unite file
<
として起動した場合、カレントディレクトリのファイルの一覧が表示されているはずで
ある。
その状態で j、k、で候補を選択できるので、適当に候補を選び、Enter を押せば選択
した候補が新しいバッファで開かれる。これは選択した候補の種類がファイルであった
場合の、デフォルトのアクションである。
候補を選択して <Tab> を押下すると候補に対するアクションが選択できる。アクショ
ンについては|unite-action|を参照。

候補が多い場合などはキーワードによって絞り込むことができる。
前回と同じように起動した後に、i を押下するとカーソルが2行目の > の右側に移る。
これで絞込みテキストが入力できる。この状態で文字を入力すると、1文字入力するご
とに候補が絞り込まれていく。また * (ワイルドカード)を入力すると任意の文字で絞
り込むことができる。例えば
>
	*hoge
<
上記は hoge、ahoge、foohoge などにマッチする。
デフォルトでは/が*/にマッピングされるため、ディレクトリの最初の数文字を入力する
だけで絞り込むことができる。
また、ワイルドカードを2つ続けて入力すると、ディレクトリを再帰的に指定できる。
例えば
>
	**/foo
<
上記は hoge/foo、hoge/fuga/foo などにマッチする。

絞り込み文字列はスペース区切りで複数指定できる。
例えば
>
	hoge piyo
<
上記は hogeにマッチかつ、piyoにマッチする候補にマッチする。

除外パターンを!で記述できる。
例えば
>
	hoge !piyo
<
上記は hogeにマッチするが、piyoにマッチする候補は除外される。

その他の操作については|unite_default_key_mappings|を参照。

==============================================================================
インストール					*unite-install*

1: 配布ファイルをVimスクリプトのディレクトリへインストールする
   (普通は ~/.vim/ またはWindowsの場合、 $HOME/vimfiles)
2: 情報源を引数に指定して、|:Unite|コマンドを実行する。
毎回このコマンドを実行するのは非常に手間であるため、何かしらのキーマッピングを
定義すると良いだろう。

==============================================================================
インターフェース				*unite-interface*

------------------------------------------------------------------------------
コマンド 					*unite-commands*

:Unite [-buffer-name={buffer-name}] [-input={input-text}] {sources}
						*:Unite*
		{sources} で指定した情報源での候補ウィンドウを表示する。初期の
		絞込みテキストは空。{sources} はスペースで区切って複数指定でき
		る。また、{sources} の指定順序が情報源の候補の表示順序となる。
		情報源については|unite-source|を参照。
		{buffer-name} はuniteのバッファ名を指定する。
		{input-text} は初期の絞込みテキストを指定する。
		uniteバッファに居る場合、絞り込みテキストは保存される。

:UniteWithCurrentDir [-buffer-name={buffer-name}] [-input={input-text}] {sources}
						*:UniteWithCurrentDir*
		{sources} で指定した情報源での候補ウィンドウを表示する。初期の
		絞込みテキストが現在のディレクトリである他は|:Unite|と同一であ
		る。

:UniteWithBufferDir [-buffer-name={buffer-name}] [-input={input-text}] {sources}
						*:UniteWithBufferDir*
		{sources} で指定した情報源での候補ウィンドウを表示する。初期の
		絞込みテキストが現在のバッファのディレクトリである他は|:Unite|
		と同一である。

:UniteWithCursorWord [-buffer-name={buffer-name}] [-input={input-text}] {sources}
						*:UniteWithCursorWord*
		{sources} で指定した情報源での候補ウィンドウを表示する。初期の
		絞込みテキストが現在のカーソル位置文字列である他は|:Unite|と同
		一である。

情報源のコマンド				*unite-sources-commands*

:UniteFilemruSweep				*:UniteFilemruSweep*
		最近使ったファイルリストから、存在しないファイルを削除する。

:UniteBookmarkAdd [{file}]			*:UniteBookmarkAdd*
		ブックマークリストにファイルを追加する。引数が指定されなかった
		場合、現在のファイルの現在位置が記録される。

------------------------------------------------------------------------------
変数						*unite-variables*

g:unite_update_time				*g:unite_update_time*
		絞込みテキストを入力するごとに表示される候補の更新間隔を制御す
		る。単位はミリ秒。
		
		初期値は400である。

g:unite_enable_start_insert			*g:unite_enable_start_insert*
		uniteを実行したあとすぐに、絞込みテキストの入力モードにするかを
		制御する。1ならば有効になる。
		
		初期値は0である。

g:unite_enable_ignore_case			*g:unite_enable_ignore_case*
		大文字・小文字を区別するかを制御する。1ならば区別しない。
		
		初期値は'ignorecase'オプションと同じである。

g:unite_enable_smart_case			*g:unite_enable_smart_case*
		入力に大文字が含まれている場合は、大文字・小文字を区別する。1
		ならば有効になる。
		
		初期値は'infercase'オプションと同じである。

g:unite_split_rule				*g:unite_split_rule*
		uniteのウィンドウを生成する際、画面分割の位置ルールを指定する。
		
		初期値は"topleft"である。

g:unite_enable_split_vertically			*g:unite_enable_split_vertically*
		uniteのウィンドウを垂直分割にするかどうかを制御する。1ならば垂
		直分割にする。
		
		初期値は0なので、水平分割である。

g:unite_data_directory				*g:unite_data_directory*
		uniteやその情報源が内部で使用する設定ファイルを書き出すディレク
		トリを指定する。ここで指定したディレクトリが実際に存在しない場
		合、自動的に作成される。例えばfile_mruの情報源は最近使用したフ
		ァイルの情報をこの下に保存する。
		
		初期値は'~/.unite'の絶対パスである。

g:unite_no_default_keymappings			*g:unite_no_default_keymappings*
		この変数の値を1にすれば、uniteが予め用意しているキーマッピング
		を設定しない。混乱するので、特に理由がない限り、通常は有効にす
		べきではない。
		
		この変数はユーザーが自分で定義しない限り存在しない。

情報源の変数					*unite-sources-variables*

g:unite_source_file_ignore_pattern		*g:unite_source_file_ignore_pattern*
		情報源がfileの候補に表示しないファイルの正規表現パターンを指定
		する。マッチングはファイルのフルパスに対して行われる。この変数
		が空文字列以外であれば、指定した正規表現で結果をフィルタリング
		する。正規表現の大文字・小文字の区別は'ignorecase'の設定次第で
		ある。

		初期値は autoload/unite/sources/file.vim を参照。

g:unite_source_file_mru_time_format		*g:unite_source_file_mru_time_format*
		情報源がfile_mruの候補での最終アクセス時間の表示フォーマットを
		指定する。フォーマットは|strftime()|で指定できるものと同じであ
		る。
		
		初期値は"(%x %H:%M:%S)"である。

g:unite_source_file_mru_file			*g:unite_source_file_mru_file*
		最近使用したファイルの情報を書き出すファイルを指定する。
		
		初期値は |g:unite_data_directory| . '/.file_mru' である。

g:unite_source_file_mru_limit			*g:unite_source_file_mru_limit*
		最近使用したファイルの最大保存件数を指定する。
		
		初期値は100である。

g:unite_source_file_mru_ignore_pattern		*g:unite_source_file_mru_ignore_pattern*
		情報源がfile_mruの候補に表示しないファイルの正規表現パターンを
		指定する。マッチングはファイルのフルパスに対して行われる。この
		変数が空文字列以外であれば、指定した正規表現で結果をフィルタリ
		ングする。正規表現の大文字・小文字は'ignorecase'の設定に関わら
		ず、明確に区別される。
		
		初期値は autoload/unite/sources/file_mru.vim を参照。

g:unite_source_bookmark_file			*g:unite_source_bookmark_file*
		ブックマークを書き出すファイルを指定する。
		
		初期値は |g:unite_data_directory| . '/.bookmark' である。

------------------------------------------------------------------------------
キーマッピング 					*unite-key-mappings*

ノーマルモードマッピング

<Plug>(unite_exit)				*<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_do_default_action)			*<Plug>(unite_do_default_action)*
		選択している候補に対してデフォルトのアクションを実行する。アク
		ションは候補の種類ごとに定義されている。
		種類については|unite-kind|を参照。
		デフォルトのアクションについては|unite-default-action|を参照。

<Plug>(unite_do_delete_action)			*<Plug>(unite_do_delete_action)*
		選択している候補に対してdeleteアクションを実行する。アクショ
		ンは候補の種類ごとに定義されている。
		種類については|unite-kind|を参照。
		deleteアクションについては|unite-action|を参照。
		アクションが存在しないときは無視される。

<Plug>(unite_do_bookmark_action)		*<Plug>(unite_do_bookmark_action)*
		選択している候補に対してbookmarkアクションを実行する。アクショ
		ンは候補の種類ごとに定義されている。
		種類については|unite-kind|を参照。
		bookmarkアクションについては|unite-action|を参照。
		アクションが存在しないときは無視される。

<Plug>(unite_do_preview_action)			*<Plug>(unite_do_preview_action)*
		選択している候補に対してアクションを実行した結果を、プレビュー
		ウィンドウに表示する。このマッピングは候補の種類がファイルの場
		合のみ動作する。情報源がレジスタの場合のプレビューは
		|<Plug>(unite_print_candidate)|が使用できる。
		アクションが存在しないときは無視される。

<Plug>(unite_do_narrow_action)			*<Plug>(unite_do_narrow_action)*
		選択している候補のディレクトリを絞込みテキストとし、絞込みテキ
		スト入力を開始する。

<Plug>(unite_choose_action)			*<Plug>(unite_choose_action)*
		選択している候補に対して実行するアクションを選択する。アクショ
		ンは種類ごとに定義されている。
		種類については|unite-kind|を参照。

<Plug>(unite_insert_enter)			*<Plug>(unite_insert_enter)*
		カーソル位置から絞込みテキスト入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_insert_head)			*<Plug>(unite_insert_head)*
		カーソルを先頭に移動して絞込みテキスト入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_append_enter)			*<Plug>(unite_append_enter)*
		カーソルの右側から絞込みテキスト入力を開始します。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_append_end)			*<Plug>(unite_append_end)*
		カーソルを行末に移動して絞込みテキストの入力を開始する。
		ただし、カーソルがプロンプト行にいない場合、カーソルが自動的に
		プロンプト行へと移動する。

<Plug>(unite_toggle_mark_current_candidate)	*<Plug>(unite_toggle_mark_current_candidate)*
		カレント行の候補のマークを反転させる。複数の候補をマークすれば、
		複数の候補に対して一気にアクションを実行することができる。

<Plug>(unite_redraw)				*<Plug>(unite_redraw)*
		|g:unite_update_time|で制御される更新間隔を待たずに、すぐに表
		示を更新する。

<Plug>(unite_search_next_source)		*<Plug>(unite_search_next_source)*
		次の情報源の最初の候補にカーソルを移動する。

<Plug>(unite_search_previous_source)		*<Plug>(unite_serch_previous_source)*
		前の情報源の最初の候補にカーソルを移動する。

<Plug>(unite_print_candidate)			*<Plug>(unite_print_candidate)*
		選択している候補に対するアクションの対象を表示する。例えば、選
		択している候補の種類が|word|の場合は、対象の内容が表示される。

<Plug>(unite_cursor_top)			*<Plug>(unite_cursor_top)*
		uniteバッファの一番上へ移動する。

<Plug>(unite_loop_cursor_down)			*<Plug>(unite_loop_cursor_down)*
		次の行に移動。ただしバッファの最後にいる場合はループする。

<Plug>(unite_loop_cursor_up)			*<Plug>(unite_loop_cursor_up)*
		前の行に移動。ただしバッファの一番上にいる場合はループする。

インサートモードマッピング

<Plug>(unite_exit)				*i_<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_insert_leave)			*i_<Plug>(unite_insert_leave)*
		ノーマルモードに移行する。

<Plug>(unite_delete_backward_char)		*i_<Plug>(unite_delete_backward_char)*
		カーソル直前の1文字を消す。

<Plug>(unite_delete_backward_line)		*i_<Plug>(unite_delete_backward_line)*
		カーソルから行の先頭までの文字をすべて削除する。

<Plug>(unite_delete_backward_word)		*i_<Plug>(unite_delete_backward_word)*
		カーソル直前の単語を削除する。

<Plug>(unite_select_next_line)			*i_<Plug>(unite_select_next_line)*
		次の候補に移動。ただし候補の最後にいる場合はループする。

<Plug>(unite_select_previous_line)		*i_<Plug>(unite_select_previous_line)*
		前の候補に移動。ただし候補の先頭にいる場合はループする。

<Plug>(unite_select_next_page)			*i_<Plug>(unite_select_next_page)*
		次の候補ページを表示。

<Plug>(unite_select_previous_page)		*i_<Plug>(unite_select_previous_page)*
		前の候補ページを表示。

<Plug>(unite_do_default_action)			*i_<Plug>(unite_do_default_action)*
		絞込みテキストに入力されているテキストを候補として、候補の種類
		に応じたデフォルトのアクションを実行する。
		種類については|unite-kind|を参照。
		デフォルトのアクションについては|unite-default-action|を参照。

<Plug>(unite_toggle_mark_current_candidate)	*i_<Plug>(unite_toggle_mark_current_candidate)*
		複数の候補に対して一気にアクションを実行するためのマークのオン
		オフを切り替える。

<Plug>(unite_choose_action)			*i_<Plug>(unite_choose_action)*
		絞込みテキストに入力されているテキストを候補として、実行するア
		クションを選択する。アクションは候補の種類ごとに定義されている。
		候補が完全な形で入力されていない場合は、先頭マッチでの補完を試
		みる。候補が複数ある場合はエラーとなる。
		種類については|unite-kind|を参照。

<Plug>(unite_move_head)				*i_<Plug>(unite_move_head)*
		カーソルを先頭に移動する。

ビジュアルモードマッピング

<Plug>(unite_toggle_mark_selected_candidates)	*v_<Plug>(unite_toggle_selected_candidates)*
		ビジュアル選択している候補に対して、マークのオンオフを切り替え
		る。

						*unite_default_key_mappings*
デフォルトキーマッピング

ノーマルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<ESC>		|<Plug>(unite_exit)|
i		|<Plug>(unite_insert_enter)|
I		|<Plug>(unite_insert_head)|
a		|<Plug>(unite_append_enter)|
A		|<Plug>(unite_append_end)|
q		|<Plug>(unite_exit)|
<CR>		|<Plug>(unite_do_default_action)|
d		|<Plug>(unite_do_delete_action)|
b		|<Plug>(unite_do_bookmark_action)|
e		|<Plug>(unite_do_narrow_action)|
<Space>		|<Plug>(unite_toggle_mark_current_candidate)|
<Tab>		|<Plug>(unite_choose_action)|
<C-n>		|<Plug>(unite_search_next_source)|
<C-p>		|<Plug>(unite_search_previous_source)|
l		候補を選択している場合は|<Plug>(unite_do_default_action)|
<C-g>		|<Plug>(unite_print_candidate)|
p		|<Plug>(unite_do_preview_action)|
<C-l>		|<Plug>(unite_redraw)|
gg		|<Plug>(unite_cursor_top)|
j		|<Plug>(unite_loop_cursor_down)|
k		|<Plug>(unite_loop_cursor_up)|

インサートモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<ESC>		|i_<Plug>(unite_insert_leave)|
<Tab>		|i_<Plug>(unite_choose_action)|
<S-Tab>		|i_<Plug>(unite_select_previous_line)|
<C-n>		|i_<Plug>(unite_select_next_line)|
<C-p>		|i_<Plug>(unite_select_previous_line)|
<C-f>		|i_<Plug>(unite_select_next_page)|
<C-b>		|i_<Plug>(unite_select_previous_page)|
<CR>		|i_<Plug>(unite_do_default_action)|
<C-h>		|i_<Plug>(unite_delete_backward_char)|
<BS>		|i_<Plug>(unite_delete_backward_char)|
<C-u>		|i_<Plug>(unite_delete_backward_line)|
<C-w>		|i_<Plug>(unite_delete_backward_word)|
<C-a>		|i_<Plug>(unite_move_head)|
<Home>		|i_<Plug>(unite_move_head)|
<Space>		候補を選択していれば|i_<Plug>(unite_toggle_mark_current_candidate)|
/		絞り込み行なら*/、その他は"narrow" actionを実行

ビジュアルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<Space>		|v_<Plug>(unite_toggle_mark_selected_candidates)|

==============================================================================
						*unite-functions*
関数

unite#mappings#do_action({action})		*unite#mappings#do_action()*
		選択及び、マークしている候補に対して{action}アクションを実行す
		る。この関数はuniteが起動している時にのみ動作する。
		ユーザー側で特定のアクションを実行するためのマッピングを定義す
		る場合に便利である。|unite-examples|を参照。

unite#mappings#smart_imap({narrow-map}, {select-map})		*unite#mappings#smart_imap()*
		絞り込み時と選択時のマッピングを設定し、文脈によって切り換える。
		inoremap <buffer><expr>で通常用いる。
		例:
>
		inoremap <buffer><expr> ' unite#mappings#smart_imap("'", "\<C-o>:\<C-u>call unite#mappings#do_action('default')\<CR>")
<
unite#set_substitute_pattern({buffer-name}, {pattern}, {subst})
						*unite#set_substitute_pattern()*
		{buffer-name}における絞込みテキストの置換パターンを指定する。
		{pattern}は置換対象の正規表現、{subst}は置換する文字列である。
		次の例では絞込みテキストを"~"で始まるように入力した場合に、
		$HOMEで検索されるようにする。{buffer-name}を省略すると、
		"default"となり、|:Unite|でbuffer-nameを省略したときに使われる
		。
		例:
>
		call unite#set_substitute_pattern('files', '^\~', substitute($HOME, '\\', '/', 'g'))
		call unite#set_substitute_pattern('files', '^\@<!/', '*/')
<
		この関数を使うと、曖昧マッチを模倣することができる。
>
		call unite#set_substitute_pattern('files', '[[:alnum:]]', '*\0')
		call unite#set_substitute_pattern('files', '[[:alnum:]]', ' \0')
<
		上の設定は/を越えずに曖昧検索をするが、下の場合は/を越えて曖昧
		検索することができる。
		
		初期値ではbuffer_nameを省略したdefaultバッファにおいて、~を
		$HOME、/はワイルドカードを付加するように設定されている。 

==============================================================================
情報源						*unite-source* *{sources}*

						*unite-source-file*
file		ファイル

						*unite-source-file_mru*
file_mru	最近使用したファイル

						*unite-source-buffer*
buffer		開いているバッファ

						*unite-source-register*
register	レジスタに保存されている文字列

						*unite-source-bookmark*
bookmark	ブックマーク

==============================================================================
種類						*unite-kind* *{kind}*

候補の種類

						*unite-kind-openable*
open		オープン可能インタフェース

						*unite-kind-file*
file		ファイル

						*unite-kind-buffer*
buffer		バッファ

						*unite-kind-directory*
directory	ディレクトリ

						*unite-kind-word*
word		文字列

						*unite-kind-jump_list*
jump_list	ジャンプリスト

==============================================================================
アクション					*unite-action* *{action}*

|<Plug>(unite_choose_action)|で選択するときは、アクション名を補完したり、曖昧で
なければ先頭文字で省略することができる。

種類別アクション

openable					*unite-action-openable*
オープン可能ファイルのインタフェースを定義している。
openアクションは個別に定義する必要がある。
	preview		プレビューウィンドウにファイルを開く
	tabopen		ファイルをタブで開く
	split		ウィンドウを水平分割してファイルを開く
	vsplit		ウィンドウを垂直分割してファイルを開く
	left		ウィンドウを垂直分割して左側にファイルを開く
	right		ウィンドウを垂直分割して右側にファイルを開く
	above		ウィンドウを水平分割して上側にファイルを開く
	below		ウィンドウを水平分割して下側にファイルを開く

file						*unite-action-file*
ファイルはすべて別のバッファに開かれる。
このkindは|unite-action-openable|のアクションを継承している。
	open		ファイルを開く
	fopen		現在のバッファの変更を破棄してファイルを開く。
			force openの略語。
	preview		プレビューウィンドウにファイルを開く
	cd		カレントディレクトリを変更
	lcd		現在のウィンドウのカレントディレクトリを変更
	ex		候補をコマンドラインに入力した状態にする。
			選択した状態では動作しない。
	bookmark	候補をブックマークに追加する
	narrow		ファイルのあるディレクトリ名で候補を絞り込む

buffer						*unite-action-buffer*
このkindは|unite-action-openable|のアクションを継承している。
	open		バッファを表示
	delete		バッファを削除
	fopen		現在のバッファの変更を破棄して表示
	fdelete		現在のバッファの変更を破棄して削除
	narrow		ファイルのあるディレクトリ名で候補を絞り込む
	cd		カレントディレクトリを変更
	lcd		現在のウィンドウのカレントディレクトリを変更

directory					*unite-action-directory*
このkindは|unite-action-file|のアクションを継承している。ここではdirectory独自
のアクションについて解説する。
	narrow		ディレクトリ名で候補を絞り込む
	vimshell	そのディレクトリで|vimshell|を起動する。これは
			|vimshell|がインストールされている場合にのみ有効なアク
			ションである。

word						*unite-action-word*
	insert		現在のバッファに文字列を挿入する

jump_list					*unite-action-jump_list*
このkindは|unite-action-file|のアクションを継承している。ここではjump_list独自
のアクションについて解説する。
	open		その候補のファイルにジャンプする

情報源別アクション

file_mru					*unite-action-file_mru*
	delete		最近使用したファイルの候補から削除

bookmark					*unite-action-bookmark*
	delete		ブックマークファイルの候補から削除

						*unite-default-action*
デフォルトアクション

種類		アクション
{kind}		{action}
----------	----------
file		open
buffer		open
directory	narrow
word		insert
jump_list	open

==============================================================================
情報源の作成					*unite-create-source*

この項はまだ未完成である。

------------------------------------------------------------------------------
情報源の属性					*unite-source-attributes*

						*unite-source-attribute-name*
name			文字列		(必須)
			情報源の名前。以下の文字で構成しなければならない。
			文字:
			- a-z
			- 0-9
			- _

			例:
			- "buffer" と "file_mru" は正当。
			- "BadOne", "virw/git", "!@#$%^&*()_[]{}-|" と "" は
			  情報源の名前としては使えない。

						*unite-source-attribute-max_candidates*
max_candidates		数値		(任意)
			候補の最大数。

			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、最大数の制限はない。

						*unite-source-attribute-required_pattern_length*
required_pattern_length	数値		(任意)
			候補を収集するのに必要な絞り込み文字列の長さ。

			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われます。この場合、常に候補が収集さ
			れる。

==============================================================================
設定例						*unite-examples*
>
	
	" The prefix key.
	nnoremap    [unite]   <Nop>
	nmap    f [unite]
	
	nnoremap [unite]u  :<C-u>Unite<Space>
	nnoremap <silent> [unite]f  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
	
	call unite#set_substitute_pattern('files', '^\~', substitute($HOME, '\\', '/', 'g'))
	" Fuzzy.
	"call unite#set_substitute_pattern('files', '[[:alnum:]]', '*\0')
	
	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()"{{{
	" Overwrite settings.
	imap <buffer> jj      <Plug>(unite_insert_leave)
	nnoremap <silent><buffer> <C-k> :<C-u>call unite#mappings#do_action('preview')<CR>
	" Start insert.
	"let g:unite_enable_start_insert = 1
	endfunction"}}}
	
	let g:unite_source_file_mru_limit = 200
	
>
==============================================================================
TODO						*unite-todo*

==============================================================================
既知のバグ					*unite-bugs*

==============================================================================
更新履歴					*unite-changelog*

doc/unite.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:fdm=marker:
